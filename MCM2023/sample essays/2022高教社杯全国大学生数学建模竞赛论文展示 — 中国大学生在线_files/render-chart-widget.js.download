/**
 * 前端渲染图表部件
 * 发布页、预览与编辑器都需要
 * 
 * @author 夏纯辉 <xiachunhui@zving.com>
 */
(function (window, $, echarts) {
  'use strict';
  window.chart = window.chart || {};
  var chart = window.chart;

  chart.render = function (chartData, chartTitle, chartType, chartElement) {
    var myChart = echarts.init(chartElement),
      chartOption;

    switch (chartType) {
      case 1:
        // 折线图
        chartOption = lineChartHandle(chartData);
        break;
      case 2:
        // 柱状图
        chartOption = pillarChartHandle(chartData);
        break;
      case 3:
        // 雷达图
        chartOption = radarChartHandle(chartData);
        break;
      case 4:
        // 饼图
        chartOption = pieChartHandle(chartData);
        break;
      case 5:
        // 环形图
        chartOption = ringChartHandle(chartData);
        break;
    }
    if(chartOption){
      chartOption.title.text = chartTitle;
      myChart.setOption(chartOption);
    }

    return myChart;
  };

  var lineChartHandle = function (data) {
    var option = {
      title: {
        text: '主标题',
        x: 'center'
      },
      tooltip: {
        trigger: 'axis'
      },
      legend: {
        orient: 'horizontal',
        bottom: 'bottom',
        data: null
      },
      toolbox: {
      },
      xAxis: {
        type: 'category',
        boundaryGap: false,
        data: null
      },
      yAxis: {
        type: 'value'
      },
      series: null
    };

    option.legend.data = getLegendData(data);
    option.xAxis.data = getXAxisData(data);
    option.series = getSeries(data, 'line');

    return option;
  },
    pillarChartHandle = function (data) {
      var option = {
        title: {
          text: '主标题',
          x: 'center'
        },
        tooltip: {
          trigger: 'axis',
          axisPointer: {            // 坐标轴指示器，坐标轴触发有效
            type: 'shadow'        // 默认为直线，可选为：'line' | 'shadow'
          }
        },
        legend: {
          orient: 'horizontal',
          bottom: 'bottom',
          data: null
        },
        xAxis: {
          type: 'category',
          data: null
          // data: ['周一', '周二', '周三', '周四', '周五', '周六', '周日']
        },
        yAxis: [
          {
            type: 'value'
          }
        ],
        series: null
      };

      option.legend.data = getLegendData(data);
      option.xAxis.data = getXAxisData(data);
      option.series = getSeries(data, 'bar');

      return option;
    },
    radarChartHandle = function (data) {
      var option = option = {
        title: {
          text: '主标题',
          x: 'center'
        },
        tooltip: {
          trigger: 'item'
        },
        legend: {
          orient: 'horizontal',
          bottom: 'bottom',
          data: null
        },
        radar: {
          indicator: []
        },
        series: [{
          name: '',
          type: 'radar',
          data: null
        }]
      };

      option.legend.data = getLegendData(data);
      option.series[0].data = getSeries(data, 'radar');

      var xAxis = getXAxisData(data),
        indicator = [],
        maxVal = getRadarMax(data);

      $.each(xAxis, function (index, val) {
        indicator.push({
          name: val,
          max: maxVal
        });
      });

      option.radar.indicator = indicator;

      return option;
    },
    pieChartHandle = function (data) {
      var option = {
        title: {
          text: '主标题',
          x: 'center'
        },
        tooltip: {
          trigger: 'item'
        },
        legend: {
          orient: 'horizontal',
          bottom: 'bottom',
          data: null
        },
        series: [
          {
            type: 'pie',
            radius: '55%',
            center: ['50%', '60%'],
            data: null,
            itemStyle: {
              emphasis: {
                shadowBlur: 10,
                shadowOffsetX: 0,
                shadowColor: 'rgba(0, 0, 0, 0.5)'
              }
            }
          }
        ]
      };

      option.legend.data = getXAxisData(data);
      option.series[0].data = getSeries(data, 'pie', option.legend.data);

      return option;
    },
    ringChartHandle = function (data) {
      var option = {
        title: {
          text: '主标题',
          x: 'center'
        },
        tooltip: {
          trigger: 'item',
        },
        legend: {
          orient: 'horizontal',
          bottom: 'bottom',
          data: null
        },
        series: [
          {
            type: 'pie',
            radius: ['50%', '70%'],
            avoidLabelOverlap: false,
            label: {
              normal: {
                show: false,
                position: 'center'
              },
              emphasis: {
                show: true,
                textStyle: {
                  fontSize: '24',
                  fontWeight: 'bold'
                }
              }
            },
            labelLine: {
              normal: {
                show: false
              }
            },
            data: null
          }
        ]
      };

      option.legend.data = getXAxisData(data);
      option.series[0].data = getSeries(data, 'pie', option.legend.data);

      return option;
    },
    getXAxisData = function (data) {
      return data[0].slice(1);
    },
    getLegendData = function (data) {
      var legendData = [];

      $.each(data, function (index, val) {
        if (index > 0) {
          legendData.push(val[0]);
        }
      });

      return legendData;
    },
    getSeries = function (data, type, legend) {
      var series = [];

      if (type === 'pie' && legend) {
        $.each(data[1].slice(1), function (index, val) {
          series.push({
            name: legend[index],
            value: val
          });
        });

        return series;
      }

      $.each(data, function (index, val) {
        if (index > 0) {
          if (type === 'radar') {
            series.push({
              name: val[0],
              value: val.slice(1)
            });
          } else {
            series.push({
              name: val[0],
              type: type,
              data: val.slice(1)
            });
          }
        }
      });

      return series;
    },
    getRadarMax = function (data) {
      var result = 0, _tmp = 0;
      // Math.max.apply(null,a)
      $.each(data, function (index, val) {

        if (index === 0) return;

        _tmp = Math.max.apply(null, val.slice(1));

        if (_tmp > result) {
          result = _tmp;
        }

      });

      return result;
    };
  
  // 在预览页、发布页渲染图表。
  if(window.charts){
    $(function(){
      var charts = window.charts;

      for(var key in charts){

        if(document.getElementById(charts[key]['slug'])){
          chart.render(charts[key]['chartData'], charts[key]['chartTitle'], charts[key]['chartType'], document.getElementById(charts[key]['slug']));
        }

      }
    });
  }
})(window, window.jQuery, window.echarts);