open Nn
open Printf

(* add weights to circle_arch *)
let circle_params : nn_params =
  [
    {
      biases =
        [
          -0.0431943644693363;
          -0.10605360665826519;
          -0.308220151037877;
          -0.12478851713631595;
          -0.1677074799219556;
        ];
      weights =
        [
          [ -0.7133531667288405; 0.9782120430526997 ];
          [ -0.2495352539086657; -1.5123305545732686 ];
          [ -1.3466167541331748; -0.11093210229047208 ];
          [ 1.4480161353418917; -0.005824006635463549 ];
          [ 0.16350978195834415; 0.9502520397474672 ];
        ];
    };
    {
      biases =
        [
          0.0139980374729149;
          -0.18161601258156404;
          -0.36538531846910144;
          0.12850746845615516;
          0.9616289030565723;
        ];
      weights =
        [
          [
            0.5881034087771264;
            -0.7527810746570118;
            -0.5022728367154621;
            -0.5388941219727726;
            -0.7754326936741739;
          ];
          [
            0.5028018543025446;
            -0.735694815738201;
            -0.6915783078861074;
            0.9712914715586971;
            0.9095727478265381;
          ];
          [
            1.12204562106515;
            1.0568805554587448;
            1.435977188536569;
            1.3120966302723878;
            0.9063627241302928;
          ];
          [
            -0.24891497879072985;
            -0.6151716952176527;
            -0.7617359973844547;
            0.27511491494923435;
            0.6226725547957972;
          ];
          [
            -0.15671735898652342;
            -0.8615868727518705;
            0.12972738104717307;
            0.01779405651400782;
            0.12924360281840638;
          ];
        ];
    };
    {
      biases =
        [
          0.048810603907813915;
          -0.000806495303284112;
          0.8023830256500495;
          0.01666319170228728;
          0.17106550495390535;
        ];
      weights =
        [
          [
            -0.24517337033147404;
            0.848297262282021;
            0.860799467502849;
            0.5334806975429219;
            -0.2998967651523305;
          ];
          [
            0.6097155267926535;
            -0.5565168353998676;
            -0.4149851424611363;
            -0.061695302133855406;
            -0.08186365012275067;
          ];
          [
            -0.3131759161682421;
            -0.5454107169851803;
            -1.135489092379839;
            0.6108533637284821;
            1.003596099527597;
          ];
          [
            0.09135919714235835;
            0.2995822558859013;
            1.10956907127731;
            -0.07766736256519388;
            -0.2547449480184279;
          ];
          [
            -0.6277203163545341;
            0.7339170802846857;
            1.868219752004691;
            0.1339423514882785;
            -0.6511720619218305;
          ];
        ];
    };
    {
      biases = [ 0.41775232772331045 ];
      weights =
        [
          [
            -1.1746816195052368;
            -0.924496372762904;
            1.5095776791863689;
            -1.222267440234113;
            -2.046643872774537;
          ];
        ];
    };
  ]

(* make the nn *)
let circle_nn = nn_from_arch circle_arch circle_params

let circle_arch_v2 =
  let in_layer = Uniform (5, Node ReLU, [ 0; 1 ]) in
  let hidden_layer = Uniform (5, Node ReLU, [ 0; 1; 2; 3; 4 ]) in
  let out_layer = Custom [ (Node Sigmoid, [ 0; 1; 2; 3; 4 ]) ] in
  Composition
    [ in_layer; Composition [ hidden_layer; hidden_layer ]; out_layer ]

let circle_nn_v2 = nn_from_arch circle_arch_v2 circle_params

(* render an output *)
let render v = if v < 0.5 then "." else "o"

let gen_axis_points k =
  let ticks = Float.div 2. (float_of_int k) in
  let rec gen_next k acc =
    if k < 0 then acc
    else
      match acc with
      | [] -> gen_next (k - 1) [ -1. ]
      | a :: acc -> gen_next (k - 1) ((a +. ticks) :: a :: acc)
  in
  gen_next k []

let draw_result_ascii num_ticks =
  let draw_row_ascii ys x =
    List.iter (printf "%s ")
      (List.map render @@ List.flatten
      @@ List.map (fun y -> circle_nn [ x; y ]) ys);
    printf "\n"
  in
  let ticks = gen_axis_points 15 in
  List.iter (draw_row_ascii ticks) ticks
