type token =
  | INT of (
# 4 "parser.mly"
        int
# 6 "parser.ml"
)
  | BOOL of (
# 5 "parser.mly"
        bool
# 11 "parser.ml"
)
  | IDENT of (
# 6 "parser.mly"
        string
# 16 "parser.ml"
)
  | COMMA
  | LET
  | REC
  | IN
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | AND
  | OR
  | NOT
  | EQ
  | FUN
  | ARROW
  | LTE
  | IF
  | THEN
  | ELSE
  | LPAREN
  | RPAREN
  | EOF
  | APPLY

open Parsing
let _ = parse_error;;
# 2 "parser.mly"
  open Desugar
# 45 "parser.ml"
let yytransl_const = [|
  260 (* COMMA *);
  261 (* LET *);
  262 (* REC *);
  263 (* IN *);
  264 (* PLUS *);
  265 (* MINUS *);
  266 (* TIMES *);
  267 (* DIV *);
  268 (* AND *);
  269 (* OR *);
  270 (* NOT *);
  271 (* EQ *);
  272 (* FUN *);
  273 (* ARROW *);
  274 (* LTE *);
  275 (* IF *);
  276 (* THEN *);
  277 (* ELSE *);
  278 (* LPAREN *);
  279 (* RPAREN *);
    0 (* EOF *);
  280 (* APPLY *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* BOOL *);
  259 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\006\000\006\000\
\006\000\007\000\007\000\007\000\003\000\003\000\008\000\005\000\
\005\000\004\000\000\000"

let yylen = "\002\000\
\002\000\004\000\007\000\004\000\006\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\002\000\001\000\001\000\003\000\
\002\000\001\000\001\000\001\000\001\000\003\000\003\000\001\000\
\002\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\018\000\019\000\026\000\000\000\000\000\000\000\
\000\000\000\000\027\000\000\000\020\000\014\000\015\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\013\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\022\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000"

let yydgoto = "\002\000\
\011\000\012\000\017\000\013\000\022\000\014\000\015\000\019\000"

let yysindex = "\010\000\
\230\255\000\000\000\000\000\000\000\000\253\254\230\255\017\255\
\230\255\230\255\000\000\125\000\000\000\000\000\000\000\017\255\
\023\255\019\255\028\255\007\255\017\255\024\255\136\255\118\255\
\230\255\230\255\230\255\230\255\230\255\230\255\230\255\000\000\
\000\000\031\255\230\255\230\255\017\255\000\000\230\255\230\255\
\000\000\037\255\037\255\004\255\004\255\216\255\216\255\013\255\
\230\255\198\255\198\255\000\000\198\255\158\255\180\255\230\255\
\230\255\198\255\198\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\029\255\001\000\026\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\055\000\073\000\019\000\037\000\097\000\109\000\085\000\
\000\000\013\000\021\255\000\000\031\000\000\000\000\000\000\000\
\000\000\049\000\067\000"

let yygindex = "\000\000\
\000\000\035\000\015\000\252\255\029\000\057\000\000\000\000\000"

let yytablesize = 403
let yytable = "\005\000\
\017\000\018\000\016\000\021\000\003\000\004\000\005\000\003\000\
\004\000\005\000\001\000\034\000\002\000\003\000\004\000\005\000\
\021\000\007\000\008\000\005\000\025\000\026\000\027\000\028\000\
\023\000\010\000\007\000\023\000\010\000\035\000\004\000\037\000\
\018\000\036\000\010\000\021\000\009\000\003\000\004\000\005\000\
\039\000\020\000\024\000\023\000\024\000\049\000\027\000\028\000\
\005\000\038\000\007\000\052\000\000\000\000\000\006\000\000\000\
\000\000\000\000\010\000\042\000\043\000\044\000\045\000\046\000\
\047\000\048\000\003\000\000\000\033\000\050\000\051\000\000\000\
\007\000\053\000\054\000\000\000\033\000\000\000\000\000\033\000\
\033\000\000\000\000\000\055\000\010\000\000\000\000\000\000\000\
\000\000\000\000\058\000\059\000\000\000\000\000\000\000\000\000\
\011\000\000\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\000\000\033\000\033\000\012\000\033\000\033\000\033\000\
\000\000\000\000\033\000\033\000\000\000\000\000\003\000\004\000\
\005\000\000\000\000\000\000\000\032\000\025\000\026\000\027\000\
\028\000\029\000\030\000\007\000\000\000\000\000\000\000\031\000\
\003\000\004\000\005\000\010\000\041\000\000\000\000\000\025\000\
\026\000\027\000\028\000\029\000\030\000\007\000\000\000\000\000\
\000\000\031\000\000\000\040\000\000\000\010\000\003\000\004\000\
\005\000\000\000\000\000\000\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\007\000\000\000\000\000\000\000\031\000\
\000\000\000\000\056\000\010\000\003\000\004\000\005\000\000\000\
\000\000\000\000\057\000\025\000\026\000\027\000\028\000\029\000\
\030\000\007\000\000\000\000\000\000\000\031\000\003\000\004\000\
\005\000\010\000\000\000\000\000\000\000\025\000\026\000\027\000\
\028\000\029\000\030\000\007\000\000\000\000\000\000\000\031\000\
\003\000\004\000\005\000\010\000\000\000\000\000\000\000\025\000\
\026\000\027\000\028\000\000\000\000\000\007\000\003\000\004\000\
\005\000\031\000\006\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\008\000\000\000\000\000\
\009\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\017\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\000\000\
\002\000\000\000\017\000\002\000\017\000\017\000\008\000\017\000\
\000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\002\000\002\000\004\000\002\000\008\000\004\000\008\000\008\000\
\009\000\008\000\000\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\004\000\004\000\005\000\004\000\009\000\005\000\
\009\000\009\000\006\000\009\000\000\000\006\000\006\000\006\000\
\000\000\000\000\006\000\006\000\005\000\005\000\003\000\005\000\
\006\000\003\000\006\000\006\000\007\000\006\000\000\000\007\000\
\007\000\007\000\000\000\000\000\007\000\007\000\003\000\003\000\
\010\000\003\000\007\000\010\000\007\000\007\000\000\000\007\000\
\010\000\010\000\000\000\000\000\011\000\000\000\010\000\011\000\
\010\000\010\000\000\000\010\000\011\000\011\000\000\000\000\000\
\012\000\000\000\000\000\012\000\011\000\011\000\000\000\011\000\
\012\000\012\000\000\000\000\000\000\000\003\000\004\000\005\000\
\012\000\012\000\000\000\012\000\025\000\026\000\027\000\028\000\
\029\000\030\000\007\000\000\000\000\000\000\000\031\000\000\000\
\000\000\000\000\010\000"

let yycheck = "\003\001\
\000\000\006\000\006\001\008\000\001\001\002\001\003\001\001\001\
\002\001\003\001\001\000\016\000\000\000\001\001\002\001\003\001\
\021\000\014\001\000\000\003\001\008\001\009\001\010\001\011\001\
\004\001\022\001\014\001\007\001\022\001\007\001\000\000\004\001\
\037\000\015\001\022\001\007\001\000\000\001\001\002\001\003\001\
\017\001\007\000\017\001\009\000\010\000\015\001\010\001\011\001\
\000\000\021\000\014\001\037\000\255\255\255\255\000\000\255\255\
\255\255\255\255\022\001\025\000\026\000\027\000\028\000\029\000\
\030\000\031\000\000\000\255\255\012\000\035\000\036\000\255\255\
\000\000\039\000\040\000\255\255\020\000\255\255\255\255\023\000\
\024\000\255\255\255\255\049\000\000\000\255\255\255\255\255\255\
\255\255\255\255\056\000\057\000\255\255\255\255\255\255\255\255\
\000\000\255\255\042\000\043\000\044\000\045\000\046\000\047\000\
\048\000\255\255\050\000\051\000\000\000\053\000\054\000\055\000\
\255\255\255\255\058\000\059\000\255\255\255\255\001\001\002\001\
\003\001\255\255\255\255\255\255\000\000\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\001\001\002\001\003\001\022\001\023\001\255\255\255\255\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\255\255\255\255\
\255\255\018\001\255\255\020\001\255\255\022\001\001\001\002\001\
\003\001\255\255\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\255\255\255\255\021\001\022\001\001\001\002\001\003\001\255\255\
\255\255\255\255\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\255\255\255\255\255\255\018\001\001\001\002\001\
\003\001\022\001\255\255\255\255\255\255\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\255\255\255\255\255\255\018\001\
\001\001\002\001\003\001\022\001\255\255\255\255\255\255\008\001\
\009\001\010\001\011\001\255\255\255\255\014\001\001\001\002\001\
\003\001\018\001\005\001\255\255\255\255\022\001\255\255\255\255\
\255\255\255\255\255\255\014\001\255\255\016\001\255\255\255\255\
\019\001\255\255\255\255\022\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\004\001\255\255\255\255\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\255\255\255\255\
\004\001\255\255\018\001\007\001\020\001\021\001\004\001\023\001\
\255\255\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\020\001\021\001\004\001\023\001\018\001\007\001\020\001\021\001\
\004\001\023\001\255\255\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\020\001\021\001\004\001\023\001\018\001\007\001\
\020\001\021\001\004\001\023\001\255\255\007\001\008\001\009\001\
\255\255\255\255\012\001\013\001\020\001\021\001\004\001\023\001\
\018\001\007\001\020\001\021\001\004\001\023\001\255\255\007\001\
\008\001\009\001\255\255\255\255\012\001\013\001\020\001\021\001\
\004\001\023\001\018\001\007\001\020\001\021\001\255\255\023\001\
\012\001\013\001\255\255\255\255\004\001\255\255\018\001\007\001\
\020\001\021\001\255\255\023\001\012\001\013\001\255\255\255\255\
\004\001\255\255\255\255\007\001\020\001\021\001\255\255\023\001\
\012\001\013\001\255\255\255\255\255\255\001\001\002\001\003\001\
\020\001\021\001\255\255\023\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\018\001\255\255\
\255\255\255\255\022\001"

let yynames_const = "\
  COMMA\000\
  LET\000\
  REC\000\
  IN\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  AND\000\
  OR\000\
  NOT\000\
  EQ\000\
  FUN\000\
  ARROW\000\
  LTE\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  APPLY\000\
  "

let yynames_block = "\
  INT\000\
  BOOL\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 31 "parser.mly"
                            ( _1 )
# 270 "parser.ml"
               : Desugar.saml_ast))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'binds) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 35 "parser.mly"
                                ( Let (_2, _4) )
# 278 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'var) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 36 "parser.mly"
                                ( LetRec (_3, _5, _7) )
# 287 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'vars) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 37 "parser.mly"
                                ( Fun (_2, _4) )
# 295 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 38 "parser.mly"
                                ( Ite (_2, _4, _6) )
# 304 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 39 "parser.mly"
                                ( Plus (_1, _3) )
# 312 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 40 "parser.mly"
                                ( Minus (_1, _3) )
# 320 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 41 "parser.mly"
                                ( Times (_1, _3) )
# 328 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 42 "parser.mly"
                                ( Divides (_1, _3) )
# 336 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 43 "parser.mly"
                                ( Lte (_1, _3) )
# 344 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 44 "parser.mly"
                                ( And (_1, _3) )
# 352 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 45 "parser.mly"
                                ( Or (_1, _3) )
# 360 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'subexpr) in
    Obj.repr(
# 46 "parser.mly"
                                ( App(_1, _2) )
# 368 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'subexpr) in
    Obj.repr(
# 47 "parser.mly"
                                ( _1 )
# 375 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'id) in
    Obj.repr(
# 50 "parser.mly"
       ( _1 )
# 382 "parser.ml"
               : 'subexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 51 "parser.mly"
                       ( _2 )
# 389 "parser.ml"
               : 'subexpr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 52 "parser.mly"
                       ( Not (_2) )
# 396 "parser.ml"
               : 'subexpr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 55 "parser.mly"
                                ( Int (_1) )
# 403 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 56 "parser.mly"
                                ( Bool (_1) )
# 410 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 57 "parser.mly"
        ( _1 )
# 417 "parser.ml"
               : 'id))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'bind) in
    Obj.repr(
# 60 "parser.mly"
         ( [ _1 ] )
# 424 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bind) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'binds) in
    Obj.repr(
# 61 "parser.mly"
                     ( _1 :: _3 )
# 432 "parser.ml"
               : 'binds))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
              ( (_1, _3) )
# 440 "parser.ml"
               : 'bind))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'var) in
    Obj.repr(
# 67 "parser.mly"
        ( [ _1 ] )
# 447 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vars) in
    Obj.repr(
# 68 "parser.mly"
             ( _1 :: _2 )
# 455 "parser.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 71 "parser.mly"
                            ( Var (_1) )
# 462 "parser.ml"
               : 'var))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Desugar.saml_ast)
