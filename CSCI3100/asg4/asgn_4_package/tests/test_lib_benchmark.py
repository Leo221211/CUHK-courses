import pytest

from asgn_4_package import lib_raw


@pytest.fixture
def prepare_benchmark_data():
    # Sample DNA sequences for benchmarking
    #
    # List is used because str does not allow swapping characters by index

    data_1 = "gtctgggagtctagataagtaaccgcgacggatcaaatttgtgcggcggtacataacctgagttcctatggtgagggatccgcttttcacttgaggagctattctaaagttccgcggctctacacgtgcccgtctaaaaaaacaaaagtcacgctacatctagcaagaacagagttcatatggactgctgacttatatagccaagtcaccggtttcaccacgatgtatacgttgtcgggtcgaaatgtggttaggactcttgcgctaatgatccaataagctttggtccccggttcgagctgccgaggaaggcgggccaaaacatcccgggaacgcgattctgctctacacacagcatgactgtcccaaataagatcctccgacggcgtccccatgacggattcatctagttgacggccaacggactccccagcgtgggagatgtaagaaacgcagatcctaggagactaccatgctcttaaggcggtactcaggcacgtccacattatctaagcgttcgatcggtaaccgattagagcgacaggattcaaccgtgaaaagctaactaggatggccggcaaatgcaggtgcgggcaggtcaagagataataaaagtgggtcttcgctgcgtcttgtagggtgctggggcgagtattagtcactacagataagttttgcggatggcgaaggggggggctaaacttcgcagtagctcccgaacgtcagtctcgtcttgcgccctcagtcaaggccggctccattggcgggtctcagggggctcggggtatttcatatcaaggccctagcatgatatccagagcaataggtcgcaggctgcaaatgaagggataaatggtccgagaggcgctcctaatagatttgggggatgacgatacgggtgaggtcatataggagctagtgccaacgaaagttcctattgtgcccttgatcgaggtgctatgttacacagtagtaaacgagcggtcctcagtttttgactaaaatcggacggctcgaatggactctctgaccggttggtggaacccggtgccagattactggtagattttgtatcggttcaaacgatcgacggcgcaattcacatgccgatatgcctatccccccaggatcctggtaaggaatcaatccaagactacgatgttgcagagggtattttgtccgctacgctttccagccgtagggcacggtccacagatttccgcgatggaaaaatcgccagccttttatgttatcgcactggaataagattaccgttggatcggactgcttcatccctgacttgcgattcgctacaaagaactgcacaacgcacctcctatactcgtacctgtaggtggatcaagtatctttatgtcgcgattaaattgcctcgtcatggatggtactcggcaccgggaaggtttggatatgcctgcacttcacagaggttagggttcctgactcgcggcataccttaaccccgggctcttctaggtggtacggggcacagccgaaaaaaaaaggtcgtctggcctcatcaaataaccaaccacaactgtccacctaattccctgacagcttagccatctaactttccgaagtcaaccagtacgcaattatttaccgcgcatgtctcgcgtagccggcggtaacgatgttggtggtgttctcgctgacaagagtcctaaggaggcgacacaattatgtttcggattgtcacgtctcatattcacctcactccataagaactacccagctactttttctggacccgtcgctaaggaatcgaagatagtgcggattcgtcaatgcatacgtgataatttggtccgggcggtcatacgtactgacacgacgtgggtagattgcgtccagtatgcatcaaaattcgatcgaggagtggtgtccatgggcggatagggatttcaaaccgtaactatctttagctggccagattaccatagggcggagtggtggagtggggagagctagtcagtggt"
    data_2 = "xtctgggagtctagataagtaaccgcgacggatcaaatttgtgcggcggtacataacctgagttcctatggtgagggatccgcttttcacttgaggagctattctaaagttccgcggctctacacgtgcccgtctaaaaaaacaaaagtcacgctacatctagcaagaacagagttcatatggactgctgacttatatagccaagtcaccggtttcaccacgatgtatacgttgtcgggtcgaaatgtggttaggactcttgcgctaatgatccaataagctttggtccccggttcgagctgccgaggaaggcgggccaaaacatcccgggaacgcgattctgctctacacacagcatgactgtcccaaataagatcctccgacggcgtccccatgacggattcatctagttgacggccaacggactccccagcgtgggagatgtaagaaacgcagatcctaggagactaccatgctcttaaggcggtactcaggcacgtccacattatctaagcgttcgatcggtaaccgattagagcgacaggattcaaccgtgaaaagctaactaggatggccggcaaatgcaggtgcgggcaggtcaagagataataaaagtgggtcttcgctgcgtcttgtagggtgctggggcgagtattagtcactacagataagttttgcggatggcgaaggggggggctaaacttcgcagtagctcccgaacgtcagtctcgtcttgcgccctcagtcaaggccggctccattggcgggtctcagggggctcggggtatttcatatcaaggccctagcatgatatccagagcaataggtcgcaggctgcaaatgaagggataaatggtccgagaggcgctcctaatagatttgggggatgacgatacgggtgaggtcatataggagctagtgccaacgaaagttcctattgtgcccttgatcgaggtgctatgttacacagtagtaaacgagcggtcctcagtttttgactaaaatcggacggctcgaatggactctctgaccggttggtggaacccggtgccagattactggtagattttgtatcggttcaaacgatcgacggcgcaattcacatgccgatatgcctatccccccaggatcctggtaaggaatcaatccaagactacgatgttgcagagggtattttgtccgctacgctttccagccgtagggcacggtccacagatttccgcgatggaaaaatcgccagccttttatgttatcgcactggaataagattaccgttggatcggactgcttcatccctgacttgcgattcgctacaaagaactgcacaacgcacctcctatactcgtacctgtaggtggatcaagtatctttatgtcgcgattaaattgcctcgtcatggatggtactcggcaccgggaaggtttggatatgcctgcacttcacagaggttagggttcctgactcgcggcataccttaaccccgggctcttctaggtggtacggggcacagccgaaaaaaaaaggtcgtctggcctcatcaaataaccaaccacaactgtccacctaattccctgacagcttagccatctaactttccgaagtcaaccagtacgcaattatttaccgcgcatgtctcgcgtagccggcggtaacgatgttggtggtgttctcgctgacaagagtcctaaggaggcgacacaattatgtttcggattgtcacgtctcatattcacctcactccataagaactacccagctactttttctggacccgtcgctaaggaatcgaagatagtgcggattcgtcaatgcatacgtgataatttggtccgggcggtcatacgtactgacacgacgtgggtagattgcgtccagtatgcatcaaaattcgatcgaggagtggtgtccatgggcggatagggatttcaaaccgtaactatctttagctggccagattaccatagggcggagtggtggagtggggagagctagtcagtggx"
    return (data_1, data_2)


def test_longest_common_substr_raw(prepare_benchmark_data, benchmark):
    # TODO 
    data_1, data_2 = prepare_benchmark_data
    result = benchmark(lib_raw.longest_common_substr, data_1, data_2)

    # we just want to measure the time taken, so we don't care about the result
    assert result > 0
